常见单词：
success  成功
failure  失败
error  错误

request  请求
response  响应

instance  实例

interceptors 拦截器


安装axios:
npm install axios --save


1.基本使用：
import axios from 'axios'

无需传参数：
axios({
  url: 'http://123.207.32.32:8000/home/multidata',
  method: 'get',
  
}).then(function(res){
  console.log(res)
})

需要传参数
axios({
  url: '',
  method:'get',
  传参（params）
  params: {
    type: 'pop'
  }
}).then(function(res){
  console.log(res)
})


2.并发请求（两个请求都完成后再做操作）
axios.all([axios({
  url: 'xxxxxxxxxx'
}),axios({
  url: 'xxxxxxx',
  params: {
    type: 'pop'
  }
})]).then(function(res){
  console.log(res[0])
  console.log(res[1])
})


3.全局配置（一些相同的配置<重复>比如Url前面，请求头...）
axios.defaults.baseURL = 'xxxxxxxx'
axios.defaults.timeOut = 5000

常见选项
method: 'get'
params: {id: 1}
get -> params

method: 'post'
data: {id: 1}
post -> data





4. axios实例

为什么要创建axios实例：
以上都用的全局的axios(axios.defaults,会统一设置所有请求，有些请求会不同！！！)
创建实例：
实例1---------------
const axios1 = axios.create({
  baseURL: 'http://xxxxxx',
  timeOut: 5000
})
axios1({
  url: 'xxxxx'
}).then(function(res){
  console.log(res)
})
实例2-----------------
const axios2 = axios.create({
  baseURL: 'xxxx',
  timeOut: 5000,
  header: 'xxxxx'
})
axios2({
  url: 'xxxx'
  params: {id: 1}
}).then((res) => {
  console.log(res)
})

5. axios封装：
全部项目不会过度依赖axios插件，都通过自定义方法（request）封装axios，
全部项目通过request方法实现网络请求（详情）



6. 拦截器

请求拦截：
axios.interceptors.requset.use((config) => {
  //请求拦截，config就是axios(config)中的config
  console.log(config)
  //拦截后进行操作完需要  返回config
  return config
}, (err) => {
  console.log(err)
})

响应拦截：
axios.interceptors.response.use((res) => {
  //响应结果res
  console.log(res)
  //拦截后进行操作完需要  返回res（真正需要的是res.data中的数据）
  return res.data
}, (err) => {
  响应错误信息
  console.log(err)
})




