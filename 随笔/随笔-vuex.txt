Vuex 状态管理
概念：多个页面需要共享的状态，进行管理

Vuex.store参数（核心概念）:
1. state{} 保存共享状态(数据)的地方
单一状态数(单一数据源)：一个项目所有共享状态，只在一个store中管理

4. getters{} 类似于计算属性

2. mutations{} 状态更新 有同步操作在这完成, devtool工具检测追踪（监视你修改的值）

3. actions{} 有异步操作在这完成

5. modules{} 划分模块 进行保存

其他组件获取Vuex.store:
1. this.$store.state.xxxdataName
2. this.$store.commit('xxxfunName')

-----------------------------------

getters使用：
每次使用希望 state中的某个状态 经过变化（一系列计算）后 再给组件使用
比如：每次使用希望 state中的某个状态 以自身的平方 使用

------------------------------------

mutations（同步操作，devtool才会监视到state中状态（数据）变化 !!!不能进行异步操作!!!）：
1. 传参 
payload：负载（提交的时候把“参数”传过去）
事件类型:回调函数(state, 参数){}
add:function(state,参数){}

提交的时候传一个参数：
$store.commit('add',参数)

传多个参数可传入object

*******************

2. 提交风格
2.1普通的提交风格：
this.$store.commit('xxx',参数)

xxx(state, 参数){}
参数：传进来的参数
  参数: 参数

2.2特殊的提交风格
this.$store.commit({
  type: 'xxxx',
  参数：参数
})

xxx(state, payload){}
payload:一个对象
  参数: payload.参数

*******************

3. 响应式规则
一开始在state中被定义的属性，这些属性都会被加入响应式系统中，响应式系统会监听属性变化，
当属性发生变化时，会通知所有界面中用到该属性的地方，让界面刷新。

增加: Vue.set(obj|arr, num|string, value)
删除: Vue.delete(obj, num|string)

*********************

4. 常量类型
官方推荐：方法名字（事件类型），定义成常量
mutations-type.js
export const ADD = "addxxxxx"

import {
  ADD
} from './xxx'

--------------------------------------------

actions（异步操作，devtool才会监视到state中状态（数据）变化）：
异步操作要让devtool生效必须增加一层actions

actions: {
  //context: 一般值上下文 在这里指的是： store对象
  aupdata(context){
    setTimeout(() => {
      //提交
      context.commit('xxxxx')
    },1000)
  }
}
使用：
$store.dispatch('aupdata');

vuex内异步操作完成后，告诉外面处理完成了：
结合promise
actions: {
  aupdata(content, payload){
    return new Promise((resolve, reject) => {
      setTimeout(function(){
        console.log(payload)
        resolve('xxx')
      },1000)
    })
  }
}
外面使用：
this.$store.dispatch('aupdata','携带的信息').then((res) => {
  console.log(res)
  console.log(里面执行完了)
})

-------------------------------
modules
可以给state分模块

modules: {
  a: {
    state: {},
    mutations: {},
    actions: {},
    getters: {}
  },
  b: {
    state: {},
    mutations: {},
    actions: {},
    getters: {}
  },
  ......
  ......
}
modules中的的a,b中的 state会被放到 state中


store目录：
store
  mutations.js
  actions.js
  getter.js
  modules
    moduleA.js
    moduleB.js


















commit => mutations
dispatch => actions


下载引入： npm install vuex --save

store > index.js
导入：
import Vue from 'vue'
import Vuex from 'vuex'

1.安装插件
Vue.use()

2.创建Store对象

const store = new Vuex.Store({
  state: {
    ...状态(数据)...
  },

})

3.导出store对象（将store传入vue实例中）
export defaule stores


